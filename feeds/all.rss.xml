<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Formally Applied</title><link>https://blog.formallyapplied.com/</link><description></description><lastBuildDate>Thu, 28 Jan 2021 10:20:00 +0100</lastBuildDate><item><title>BCOVBench: A benchmark suite for binary analysis research</title><link>https://blog.formallyapplied.com/2021/01/bcov-bench/</link><description>&lt;p&gt;We are happy to announce the release of BCOVBench, the benchmark binaries discussed in our ESEC/FSE'20 paper. This benchmark suite consists of 95 real-world binaries in total. We compiled these binaries from 8 widely-used packages, using 4 different versions of &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;gcc&lt;/code&gt;, and 3 optimization levels.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ammar Ben Khadra</dc:creator><pubDate>Thu, 28 Jan 2021 10:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.formallyapplied.com,2021-01-28:/2021/01/bcov-bench/</guid><category>research</category><category>binary analysis</category><category>reverse engineering</category></item><item><title>Visualizing program graphs using bcov</title><link>https://blog.formallyapplied.com/2020/06/bcov-program-graphs/</link><description>&lt;p&gt;A couple of weeks ago, we released &lt;strong&gt;bcov&lt;/strong&gt;, a tool for efficient binary-level coverage analysis via static instrumentation. The tool supported only two operation modes, namely, patching and coverage reporting. Today, we add another operation mode that dumps various program graphs, like the CFG and dominator trees, for a given function in the binary. This article describes these graphs in more detail.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ammar Ben Khadra</dc:creator><pubDate>Tue, 16 Jun 2020 10:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.formallyapplied.com,2020-06-16:/2020/06/bcov-program-graphs/</guid><category>research</category><category>binary analysis</category><category>reverse engineering</category></item><item><title>Function identification in stripped binaries revisited</title><link>https://blog.formallyapplied.com/2020/05/function-identification/</link><description>&lt;p&gt;In this article, I revisit the problem of function identification  with two goals in mind. First, overviewing the state of the art in a systematic way. Second, discussion and quantification of the (often overlooked) role that call frame information can play as a source of function definitions.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ammar Ben Khadra</dc:creator><pubDate>Tue, 26 May 2020 10:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.formallyapplied.com,2020-05-26:/2020/05/function-identification/</guid><category>research</category><category>binary analysis</category><category>reverse engineering</category></item><item><title>An introduction to approximate computing</title><link>https://blog.formallyapplied.com/2017/11/approx-intro/</link><description>&lt;p class="first last"&gt;Approximate computing is a wide spectrum of techniques that relax
accuracy of computations in order to improve performance, energy, and/or other
metric of merit. In this article, I'll try to provide a structured introduction
to this research area.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ammar Ben Khadra</dc:creator><pubDate>Tue, 07 Nov 2017 10:20:00 +0100</pubDate><guid isPermaLink="false">tag:blog.formallyapplied.com,2017-11-07:/2017/11/approx-intro/</guid><category>research</category><category>approximate computing</category><category>reliability</category></item><item><title>Undefined behavior in the wild</title><link>https://blog.formallyapplied.com/2017/05/ub-in-wild/</link><description>&lt;p class="first last"&gt;So I was hacking an open source C++ project. The project builds
using gcc v5.4 and runs without problems. Then, I grabbed gcc v6.2 to see
how much performance improvement can be gained. Surprisingly, the program segfaulted ...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ammar Ben Khadra</dc:creator><pubDate>Thu, 25 May 2017 10:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.formallyapplied.com,2017-05-25:/2017/05/ub-in-wild/</guid><category>programming</category><category>c++</category><category>gcc</category><category>undefined behavior</category></item><item><title>Floating-point satisfiability as global optimization</title><link>https://blog.formallyapplied.com/2017/05/gosat-faq/</link><description>&lt;p class="first last"&gt;Solving SMT formulas involving the theory of floating-pointing arithmetic (FPA)
can be encountered in several domains including symbolic execution and program synthesis.
Unfortunately, SMT solvers which support FPA often struggle
trying to satisfy ...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ammar Ben Khadra</dc:creator><pubDate>Wed, 10 May 2017 10:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.formallyapplied.com,2017-05-10:/2017/05/gosat-faq/</guid><category>research</category><category>smt</category><category>floating-point</category></item><item><title>Building this blog</title><link>https://blog.formallyapplied.com/2017/05/building-this-blog/</link><description>&lt;p class="first last"&gt;Details about the tools and services used in building this blog. Also, some discussion
about the design rationale behind it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ammar Ben Khadra</dc:creator><pubDate>Thu, 04 May 2017 10:20:00 +0200</pubDate><guid isPermaLink="false">tag:blog.formallyapplied.com,2017-05-04:/2017/05/building-this-blog/</guid><category>misc</category><category>blogging</category></item></channel></rss>